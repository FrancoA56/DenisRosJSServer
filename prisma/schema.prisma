generator client {
  provider = "prisma-client-js"
}

enum InvoiceStatus {
  PENDIENTE
  PAGADA
  CANCELADA
}

enum PaymentMethod {
  TARJETA
  TRANSFERENCIA
  EFECTIVO
  MODO
  MERCADOPAGO
}

enum Role {
  CLIENTE
  GESTOR
  ADMIN
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELED
}

model Product {
  id         Int                @id @default(autoincrement())
  sku        String
  name       String
  shortDesc  String
  longDesc   String
  tags       String[]           @default([])           
  categoryId Int?
  category   Category?          @relation(fields: [categoryId], references: [id])
  brandId    Int?
  brand      Brand?             @relation(fields: [brandId], references: [id])
  reviews    Review[]
  gallery    String[]
  attributes ProductAttribute[]
  variations ProductVariation[]
  discount   Discount?
  orderItems OrderItem[]
  basePrice  Float
  baseWeight Float?
  baseLength Float?
  baseWidth  Float?
  baseHeight Float?
  isDisabled Boolean            @default(false)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  deletedAt  DateTime?

  @@map("products")
}

model Category {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  products   Product[]
  isDisabled Boolean   @default(false)

  @@map("categories")
}

model Brand {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  logo       String?
  isDisabled Boolean   @default(false)
  products   Product[]

  @@map("brands")
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  stars     Int
  message   String?
  createdAt DateTime @default(now())

  @@map("reviews")
}

model Attribute {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  description      String?
  options          AttributeOption[]
  isDisabled       Boolean            @default(false)
  ProductAttribute ProductAttribute[]

  @@map("attributes")
}

model AttributeOption {
  id              Int               @id @default(autoincrement())
  attributeId     Int
  attribute       Attribute         @relation(fields: [attributeId], references: [id])
  value           String
  code            String?
  isDisabled      Boolean           @default(false)
  VariationOption VariationOption[]

  @@map("attribute_options")
}

model ProductAttribute {
  id          Int       @id @default(autoincrement())
  productId   Int
  product     Product   @relation(fields: [productId], references: [id])
  attributeId Int
  attribute   Attribute @relation(fields: [attributeId], references: [id])
  isRequired  Boolean   @default(false)

  @@map("product_attributes")
}

model ProductVariation {
  id         Int               @id @default(autoincrement())
  productId  Int
  product    Product           @relation(fields: [productId], references: [id])
  sku        String            @unique
  price      Float?
  stock      Int               @default(0)
  weight     Float?
  length     Float?
  width      Float?
  height     Float?
  imageUrl   String?
  isDefault  Boolean           @default(false)
  options    VariationOption[]
  orderItems OrderItem[]
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  @@map("product_variations")
}

model VariationOption {
  id                Int              @id @default(autoincrement())
  variationId       Int
  variation         ProductVariation @relation(fields: [variationId], references: [id])
  attributeOptionId Int
  attributeOption   AttributeOption  @relation(fields: [attributeOptionId], references: [id])

  @@unique([variationId, attributeOptionId])
  @@map("variation_options")
}

model Discount {
  id        Int       @id @default(autoincrement())
  productId Int       @unique
  product   Product   @relation(fields: [productId], references: [id])
  type      String // "percentage" o "fixed"
  value     Float // Si es "percentage" es %, si es "fixed" es dinero
  startDate DateTime?
  endDate   DateTime?

  @@map("discounts")
}

model Order {
  id            Int         @id @default(autoincrement())
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  items         OrderItem[]
  totalAmount   Float
  status        OrderStatus @default(PENDING)
  paymentId     String? // ID del pago en Mercado Pago u otro servicio
  paymentMethod String // Método de pago ("MercadoPago", "Banco", etc.)
  shipping      Shipping?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Invoice       Invoice[]

  @@map("orders")
}

model OrderItem {
  id          Int               @id @default(autoincrement())
  orderId     Int
  order       Order             @relation(fields: [orderId], references: [id])
  productId   Int
  product     Product           @relation(fields: [productId], references: [id])
  variationId Int?
  variation   ProductVariation? @relation(fields: [variationId], references: [id])
  quantity    Int
  price       Float // Precio en el momento de la compra

  @@map("order_items")
}

model Shipping {
  id         Int      @id @default(autoincrement())
  orderId    Int      @unique
  order      Order    @relation(fields: [orderId], references: [id])
  trackingId String? // ID de seguimiento
  status     String // Estado del envío
  address    Json // Datos de envío (puede ser estructurado)
  createdAt  DateTime @default(now())

  @@map("shippings")
}

model User {
  id              Int       @id @default(autoincrement())
  firstName       String?
  lastName        String?
  phone           String?
  bday            DateTime?
  ciudad          String?
  provincia       String?
  direccion       String?
  numeroDireccion String?
  email           String    @unique
  passwordHashed  String
  codigoPostal    String?
  isDisabled      Boolean   @default(false)
  role            Role      @default(CLIENTE)
  orders          Order[]
  reviews         Review[]
  Invoice         Invoice[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("users")
}

model Invoice {
  id            Int           @id @default(autoincrement())
  userId        Int
  user          User          @relation(fields: [userId], references: [id])
  orderId       Int
  order         Order         @relation(fields: [orderId], references: [id])
  total         Decimal       @db.Decimal(10, 2)
  items         Json // Lista de productos comprados
  paymentMethod PaymentMethod
  status        InvoiceStatus @default(PENDIENTE)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("invoices")
}
